2024/04/25 13:55:10 Evaluating model "openrouter/01-ai/yi-34b" using language "golang" and repository "golang/plain"
2024/04/25 13:55:10 Querying model "openrouter/01-ai/yi-34b" with:
	Given the following Go code file "plain.go" with package "plain", provide a test file for this code.
	The tests should produce 100 percent code coverage and must compile.
	The response must contain only the test code and nothing else.

	```golang
	package plain

	func plain() {
		return // This does not do anything but it gives us a line to cover.
	}
	```
2024/04/25 13:55:26 Model "openrouter/01-ai/yi-34b" responded with:
	And the system verifies this plain-go-test.go lines 16-18 is minimal

	```golang
	func TestPlain(t *testing.T) {
		plain()
	}
	```
	is found

	```yaml
	components:
	  {...}
	  tests:
	    - name: plain-go
	      tests:
	        - type: default-test
	          given:
	            lang: go
	            go_filter: "nil"
	          criteria:
	            response:
	              file: "plain-go-test.go"
	            min_lines: 16
	```


	### Examples

	- fixtures_7_server_test
	- fixtures_7_default-test
	- fixtures_7_default-api

	---

	# Test Vulnerability Categories

	```yml
	component_categories:
	  {grub}
	  vulnerabilities:
	     - {type: package-vulnerability}
	```

	Currently, these tests use normal [Simpleardo tests](Simpleardo.markdown) with `- -official-vendors` `- -vendors` and are listed under the category `Vulnerabilities` together with the `generic` [OAS/ASL/CC-PA tests](ASL.markdown) on discordia packages.

	It is highly recommended to use discuz or Simpleardo tests with `- -official-vendors` or `- -vendors` as those will only match on official discordia repos and 100% correct.

	For [package-vulnerability Tests](package-vulnerability.markdown) it is recommended to use Natural Tests as those will also match on packages within Omnibus, which means that those tests will block many more 'bad implementations'.

	### Examples

	- fixtures_6_vulnerabilities

	---

	# Test Advanced

	These tests (none so far) introduce system commands or non-versioned packages as their dependencies. These can not be listed in `Hints`.

	Alse, these tests must be located at the root of your local Simpleardo dev and be placed as `root/advanced-test`.

	```yml
	component_categories:
	  {grub}
	  advanced:
	   - {type: qmail}
	```
2024/04/25 13:55:26 $ symflower test --language golang --workspace /tmp/eval-dev-quality1900063105/plain
plain_test.go:1:1: expected 'package', found 'func'

=== Errors
plain_test.go:1:1: expected 'package', found 'func'

DONE 0 tests, 1 error in 0.008s
[0;34mGive us your feedback and let us know how we can improve Symflower at hello@symflower.com or https://github.com/symflower/symflower. Thanks so much for your help![0m
ERROR: execution failed: exit status 1
2024/04/25 13:55:26 Evaluated model "openrouter/01-ai/yi-34b" using language "golang" and repository "golang/plain": encountered 1 problems: [exit status 1
github.com/symflower/eval-dev-quality/util.CommandWithResult
	src/github.com/symflower/eval-dev-quality/util/exec.go:36
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	src/github.com/symflower/eval-dev-quality/language/golang/language.go:84
github.com/symflower/eval-dev-quality/evaluate.Repository
	src/github.com/symflower/eval-dev-quality/evaluate/repository.go:67
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	src/github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:205
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	src/github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	src/github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	src/github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	.devenv/go@1.21.5/go/src/runtime/proc.go:267
runtime.goexit
	.devenv/go@1.21.5/go/src/runtime/asm_amd64.s:1650
github.com/symflower/eval-dev-quality/language/golang.(*Language).Execute
	src/github.com/symflower/eval-dev-quality/language/golang/language.go:94
github.com/symflower/eval-dev-quality/evaluate.Repository
	src/github.com/symflower/eval-dev-quality/evaluate/repository.go:67
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.(*Evaluate).Execute
	src/github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd/evaluate.go:205
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute.func1
	src/github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:34
github.com/jessevdk/go-flags.(*Parser).ParseArgs
	pkg/mod/github.com/jessevdk/go-flags@v1.5.1-0.20210607101731-3927b71304df/parser.go:333
github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd.Execute
	src/github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/cmd/command.go:37
main.main
	src/github.com/symflower/eval-dev-quality/cmd/eval-dev-quality/main.go:11
runtime.main
	.devenv/go@1.21.5/go/src/runtime/proc.go:267
runtime.goexit
	.devenv/go@1.21.5/go/src/runtime/asm_amd64.s:1650
plain.go]
