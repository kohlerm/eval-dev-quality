// Code generated by mockery v2.40.3. DO NOT EDIT.

package modeltesting

import (
	language "github.com/symflower/eval-dev-quality/language"
	log "github.com/symflower/eval-dev-quality/log"

	metrics "github.com/symflower/eval-dev-quality/evaluate/metrics"

	mock "github.com/stretchr/testify/mock"
)

// MockModel is an autogenerated mock type for the Model type
type MockModel struct {
	mock.Mock
}

// GenerateTestsForFile provides a mock function with given fields: logger, _a1, repositoryPath, filePath
func (_m *MockModel) GenerateTestsForFile(logger *log.Logger, _a1 language.Language, repositoryPath string, filePath string) (metrics.Assessments, error) {
	ret := _m.Called(logger, _a1, repositoryPath, filePath)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTestsForFile")
	}

	var r0 metrics.Assessments
	var r1 error
	if rf, ok := ret.Get(0).(func(*log.Logger, language.Language, string, string) (metrics.Assessments, error)); ok {
		return rf(logger, _a1, repositoryPath, filePath)
	}
	if rf, ok := ret.Get(0).(func(*log.Logger, language.Language, string, string) metrics.Assessments); ok {
		r0 = rf(logger, _a1, repositoryPath, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Assessments)
		}
	}

	if rf, ok := ret.Get(1).(func(*log.Logger, language.Language, string, string) error); ok {
		r1 = rf(logger, _a1, repositoryPath, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *MockModel) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockModel creates a new instance of MockModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModel {
	mock := &MockModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
